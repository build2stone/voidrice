# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"
$lf -remote "send $id set cleaner ${XDG_CONFIG_HOME:-$HOME/.config}/lf/clear_img.sh"

cmd open $opener $fx
cmd OPEN $WINDOW=1 opener $fx
map L OPEN

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && ( trash-put -- $fx || rm -rf -- $fx )
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' -e 's/^/echo /' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | sh | fzf)" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*// -e 's/^/echo /' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | sh | fzf)" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd bulkrename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	index_edit=$(mktemp /tmp/lf-bulk-rename-edit.XXXXXXXXXX)
	index_move=$(mktemp /tmp/lf-bulk-rename-move.XXXXXXXXXX)

	# If files selected use those, else grab all in current directory
	if [ -n "${fs}" ]; then
		echo "$fs" > "$index"
		echo "$fs" | xargs -d "\n" basename -a > "$index_edit"
	else
		ls | tee "$index" "$index_edit" >/dev/null
	fi

	# Edit names while displaying original names in scratch buffer (with prepended paths if selected)
	# (Assuming $EDITOR is vim/nvim)
	$EDITOR -c "source $HOME/.config/lf/withdisplay.vim" -O "$index_edit" "$index"

	if [ -n "${fs}" ]; then
		xargs -a "$index" -d "\n" dirname | paste -d "/" - "$index_edit" > "$index_move"
	else
		cat "$index_edit" > "$index_move"
	fi

	# Move files if number of lines unchanged
	if [ "$(wc -l <"$index")" -eq "$(wc -l <"$index_move")" ]; then
		# Create target dirs if necessary
		xargs -a "$index_move" -d "\n" dirname | sort -u | xargs -d "\n" mkdir -p
		# Move the files
		paste -d "\n" "$index" "$index_move" | xargs -P 0 -d "\n" -n 2 mv -Tn --
	else
		echo "Number of lines must stay the same"
	fi

	rm "$index" "$index_edit" "$index_move"
}}

cmd setbg "$1"

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' -e 's/^/echo /' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | sh | fzf)"
map gh
map g top
map D delete
map R $trash-restore
map E %unar $f
map C copyto
map M moveto
map t push %touch<space>
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map <c-s> $sxiv -fta *
map U %dua $f
map <c-u> $dua interactive
map <c-v> $$HOME/.config/lf/scope $f | less +k
map o &mimeopen $f
map O $mimeopen --ask $f
map <c-o> $mimeopen --ask-default $f

map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b> # after extension
map B bulkrename
map b $setbg $f

cmap <up> cmd-history-prev
cmap <down> cmd-history-next
map <esc> clear
map <c-e> down
map <c-y> up
map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1

map Y $printf "%s" "$fx" | xclip -selection clipboard

# Source Bookmarks
source "~/.config/lf/shortcutrc"
