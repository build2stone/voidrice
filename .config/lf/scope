#!/bin/sh

# File preview handler for lf.

set -C -f
# IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 2    | plain text | Display the plain content of the file

file="${1}"
mimetype="$(file -Lb --mime-type -- "${file}")"
width="${2:-$(stty size | cut -d" " -f2)}"
height="${3:-$(( $(stty size | cut -d" " -f1) - 1 ))}"
shift

# Can we display images?
imgpreview=false
if [ -n "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ] && [ -n "${FIFO_UEBERZUG:-}" ] && command -V ueberzug >/dev/null 2>&1; then
  # Then compute hashes
  hash() {
    printf '%s/.cache/lf/%s' "$HOME" \
      "$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}')"
  }
  cache="$(hash "$file").jpg"
  # Register draw function
  args=($1 $2 $3 $4)
  draw() {
    if [ -f "$cache" ]; then
      ~/.config/lf/draw_img.sh "$cache" "${args[0]}" "${args[1]}" "${args[2]}" "${args[3]}"
      exit 1
    fi
  }
  # And try to draw caches
  draw

  # Also let the rest of the script know it can display images
  imgpreview=true
fi


view_image() {
  if $imgpreview; then
    convert -- "${file}[0]" -auto-orient -background white -flatten "$cache"
    draw
  else
    chafa --fill=block --symbols=block -c 256 -s "${width}"x"${height}" "${file}"
  fi
}

view_video() {
  if $imgpreview; then
    ffmpegthumbnailer -i "$file" -o "$cache" -s 0
    draw
  fi
}

view_zip() {
  if $imgpreview; then
    case "${file##*.}" in
      cbz)
        funzip -"" "${file}" | convert -- - -auto-orient -background white -flatten "$cache"
        ;;
      kra)
        unzip -P "" -p "${file}" "mergedimage.png" | convert -- - -auto-orient -background white -flatten "$cache"
        ;;
    esac
    draw
  fi
}
view_pdf() {
  # Only image-preview pdfs containing no text within the first 5 pages
  if $imgpreview && [ -z "$(pdftotext -l 5 "$file" - | tr -d "[:space:]")" ]; then
    resx=$(( $(cut -d',' -f1 </sys/class/graphics/fb0/virtual_size) / 2))
    pdftoppm -singlefile -jpeg -jpegopt quality=95 -scale-to-x $resx -scale-to-y -1 "$file" > "$cache"
    draw
  else
    pdftotext -l 10 -nopgbrk -layout -q -- "${file}" -
  fi
}

# Settings
highlight_size_max=262143  # 256KiB
highlight_tabwidth=8
highlight_style='pablo'
if [ "$( tput colors )" -ge 256 ]; then
  highlight_format='xterm256'
else
  highlight_format='ansi'
fi

export MANWIDTH="${width}"

case "${mimetype}" in
  text/html) lynx -display_charset=utf-8 -dump "${FILE_PATH}"  ;;
  text/troff) man ./ "${file}" | col -b ;;
  */json) jq -C . "${file}" && exit ;&
  text/* | */xml)
    if [ "$( stat --printf='%s' -- "${file}" )" -gt "${highlight_size_max}" ]; then
      exit 2
    fi
    highlight --replace-tabs="${highlight_tabwidth}" --out-format="${highlight_format}" --style="${highlight_style}" --force -- "${file}" ;;&
  application/zip) view_zip "$@" ;;
  application/zip | application/gzip) atool --list -- "${file}" ;;
  application/epub+zip) epub2txt -w "${width}" -- "${file}" ;;
  application/x-7z-compressed) 7z l "${file}" ;;
  application/zstd) zstd -l "${file}" ;;
  application/x-tar) tar tvf "${file}" ;;
  image/*) view_image ;;
  video/*) view_video ;;
  video/* | audio/*|application/octet-stream) mediainfo "${file}" || exit 1;;
  */pdf) view_pdf ;;
  *opendocument*) odt2txt --width="${width}" "${file}" ;;
  *wordprocessingml*) docx2txt <"${file}" | fold -w "${width}";;
  application/pgp-encrypted) gpg -d -- "${file}" ;;
esac

exit 1
