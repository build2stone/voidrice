#!/bin/bash

set -C -f -u
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

# ANSI color codes are supported.
# STDIN is disabled, so interactive scripts won't work properly

# This script is considered a configuration file and must be updated manually.

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 2    | plain text | Display the plain content of the file

file="${1}"
mimetype="$(file -Lb --mime-type -- "${file}")"
width="${2:-$(stty size | cut -d" " -f2)}"
height="${3:-`expr $(stty size | cut -d" " -f1) - 1`}"
shift

draw() {
	~/.config/lf/draw_img.sh "$@"
	exit 1
}

hash() {
	printf '%s/.cache/lf/%s' "$HOME" \
		"$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}')"
}

cache() {
	if [ -f "$1" ]; then
		draw "$@"
	fi
}

# Image preview if available
if [ -n "${FIFO_UEBERZUG:-}" ]; then
	case "${mimetype}" in
		image/*)
			cache="$(hash "$file").jpg"
			cache "$cache" "$@"
			convert -- "${file}[0]" -auto-orient "$cache"
			draw "$cache" "$@"
			;;
		video/*)
			cache="$(hash "$file").jpg"
			cache "$cache" "$@"
			ffmpegthumbnailer -i "$file" -o "$cache" -s 0
			draw "$cache" "$@"
			;;
		application/zip)
			if [ ${file##*.} = "cbz" ]; then
				cache="$(hash "$file").jpg"
				cache "$cache" "$@"
				unzip -p "${file}" "$(zipinfo -1 "${file}" | sed -E 's/(\*|\?|\[|\])/\\\1/g;q')" \
					| convert -- - -auto-orient "$cache"
				draw "$cache" "$@"
			else
				if [ ${file##*.} = "kra" ]; then
				cache="$(hash "$file").jpg"
				cache "$cache" "$@"
				unzip -p "${file}" "mergedimage.png" | convert -- - "$cache"
				draw "$cache" "$@"
				fi
			fi
			;;
		application/pdf)
			# Only image-preview pdfs containing no text
			if [ -z "$(pdftotext "$file" - | tr -d "[:space:]")" ]; then
				cache="$(hash "$file").jpg"
				cache "$cache" "$@"
				resx=`expr $(cat /sys/class/graphics/fb0/virtual_size | cut -d',' -f1) / 2`
				pdftoppm -singlefile -jpeg -jpegopt quality=95 -scale-to-x $resx -scale-to-y -1 "$file" > "$cache"
				draw "$cache" "$@"
			fi
			;;
	esac
fi

# Settings
highlight_size_max=262143  # 256KiB
highlight_tabwidth=8
highlight_style='pablo'
if [ "$( tput colors )" -ge 256 ]; then
	highlight_format='xterm256'
else
	highlight_format='ansi'
fi

export MANWIDTH="${width}"

case "${mimetype}" in
	text/html|text/xml) w3m -dump "${file}" ;;
	text/troff) man ./ "${file}" | col -b ;;
	text/* | */xml | */json | */json5)
		if [ "$( stat --printf='%s' -- "${file}" )" -gt "${highlight_size_max}" ]; then
			exit 2
		fi
		highlight --replace-tabs="${highlight_tabwidth}" --out-format="${highlight_format}" --style="${highlight_style}" --force -- "${file}" ;;
	application/zip | application/gzip) atool --list -- "${file}" ;;
	application/epub+zip) epub2txt -w "${width}" -- "${file}" ;;
	application/x-7z-compressed) 7z l "${file}" ;;
	application/zstd) zstd -l "${file}" ;;
	image/*) chafa --fill=block --symbols=block -c 256 -s "${width}"x"${height}" "${file}" || exit 1;;
	video/* | audio/*|application/octet-stream) mediainfo "${file}" || exit 1;;
	*/pdf) pdftotext -l 10 -nopgbrk -layout -q -- "${file}" - ;;
	*opendocument.text) odt2txt --width="${width}" "${file}" ;;
	*wordprocessingml*) docx2txt <"${file}" | fold -w "${width}";;
esac

exit 0
